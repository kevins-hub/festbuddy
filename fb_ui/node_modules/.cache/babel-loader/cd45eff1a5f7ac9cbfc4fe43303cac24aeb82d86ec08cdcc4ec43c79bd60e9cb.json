{"ast":null,"code":"import { useRef, useState, useCallback, useEffect } from 'react';\nvar DEFAULT_ROOT_MARGIN = '0px';\nvar DEFAULT_THRESHOLD = [0]; // For more info:\n// https://developers.google.com/web/updates/2016/04/intersectionobserver\n// https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\n\nfunction useIntersectionObserver(args) {\n  var _args$rootMargin, _args$threshold;\n  var rootMargin = (_args$rootMargin = args == null ? void 0 : args.rootMargin) != null ? _args$rootMargin : DEFAULT_ROOT_MARGIN;\n  var threshold = (_args$threshold = args == null ? void 0 : args.threshold) != null ? _args$threshold : DEFAULT_THRESHOLD;\n  var nodeRef = useRef(null);\n  var rootRef = useRef(null);\n  var observerRef = useRef(null);\n  var _useState = useState(),\n    entry = _useState[0],\n    setEntry = _useState[1];\n  var unobserve = useCallback(function () {\n    // Disconnect the current observer (if there is one)\n    var currentObserver = observerRef.current;\n    currentObserver == null ? void 0 : currentObserver.disconnect();\n    observerRef.current = null;\n  }, []);\n  var observe = useCallback(function () {\n    var node = nodeRef.current;\n    if (node) {\n      var root = rootRef.current;\n      var options = {\n        root: root,\n        rootMargin: rootMargin,\n        threshold: threshold\n      }; // Create a observer for current \"node\" with given options.\n\n      var observer = new IntersectionObserver(function (_ref) {\n        var newEntry = _ref[0];\n        setEntry(newEntry);\n      }, options);\n      observer.observe(node);\n      observerRef.current = observer;\n    }\n  }, [rootMargin, threshold]);\n  var initializeObserver = useCallback(function () {\n    unobserve();\n    observe();\n  }, [observe, unobserve]);\n  var refCallback = useCallback(function (node) {\n    nodeRef.current = node;\n    initializeObserver();\n  }, [initializeObserver]);\n  var rootRefCallback = useCallback(function (rootNode) {\n    rootRef.current = rootNode;\n    initializeObserver();\n  }, [initializeObserver]);\n  useEffect(function () {\n    // After React 18, StrictMode unmounts and mounts components to be sure\n    // if they are resilient effects being mounted and destroyed multiple times.\n    // This a behavior to be sure nothing breaks when off-screen components\n    // can preserve their state with future React versions.\n    // So in StrictMode, React unmounts the component, clean-up of this useEffect gets triggered and\n    // we stop observing the node. But we need to start observing after component re-mounts with its preserved state.\n    // So to handle this case, we call initializeObserver here.\n    // https://reactjs.org/blog/2022/03/08/react-18-upgrade-guide.html#updates-to-strict-mode\n    initializeObserver();\n    return function () {\n      // We disconnect the observer on unmount to prevent memory leaks etc.\n      unobserve();\n    };\n  }, [initializeObserver, unobserve]);\n  return [refCallback, {\n    entry: entry,\n    rootRef: rootRefCallback\n  }];\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction useTrackVisibility(args) {\n  var _result$entry;\n  var _useIntersectionObser = useIntersectionObserver(args),\n    ref = _useIntersectionObser[0],\n    result = _useIntersectionObser[1];\n  var isVisible = Boolean((_result$entry = result.entry) == null ? void 0 : _result$entry.isIntersecting);\n  var _useState = useState(isVisible),\n    wasEverVisible = _useState[0],\n    setWasEverVisible = _useState[1];\n  if (isVisible && !wasEverVisible) {\n    setWasEverVisible(true);\n  }\n  return [ref, _extends({}, result, {\n    isVisible: isVisible,\n    wasEverVisible: wasEverVisible\n  })];\n}\nexport { useIntersectionObserver, useTrackVisibility };","map":{"version":3,"mappings":"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","names":["DEFAULT_ROOT_MARGIN","DEFAULT_THRESHOLD","useIntersectionObserver","args","rootMargin","threshold","nodeRef","useRef","rootRef","observerRef","useState","entry","setEntry","unobserve","useCallback","currentObserver","current","disconnect","observe","node","root","options","observer","IntersectionObserver","newEntry","initializeObserver","refCallback","rootRefCallback","rootNode","useEffect","useTrackVisibility","ref","result","isVisible","Boolean","_result$entry","isIntersecting","wasEverVisible","setWasEverVisible"],"sources":["/Users/pq584452/festbuddy/node_modules/react-intersection-observer-hook/src/useIntersectionObserver.ts","/Users/pq584452/festbuddy/node_modules/react-intersection-observer-hook/src/useTrackVisibility.ts"],"sourcesContent":["import { useState, useCallback, useEffect, useRef } from 'react';\r\nimport { Omit } from './types';\r\n\r\nconst DEFAULT_ROOT_MARGIN = '0px';\r\nconst DEFAULT_THRESHOLD = [0];\r\n\r\nexport type IntersectionObserverHookArgs = Omit<\r\n  IntersectionObserverInit,\r\n  'root'\r\n>;\r\n\r\nexport type IntersectionObserverHookRefCallbackNode = Element | null;\r\n\r\nexport type IntersectionObserverHookRefCallback = (\r\n  node: IntersectionObserverHookRefCallbackNode,\r\n) => void;\r\n\r\nexport type IntersectionObserverHookRootRefCallbackNode = IntersectionObserverInit['root'];\r\n\r\nexport type IntersectionObserverHookRootRefCallback = (\r\n  node: IntersectionObserverHookRootRefCallbackNode,\r\n) => void;\r\n\r\nexport type IntersectionObserverHookResult = [\r\n  IntersectionObserverHookRefCallback,\r\n  {\r\n    entry: IntersectionObserverEntry | undefined;\r\n    rootRef: IntersectionObserverHookRootRefCallback;\r\n  },\r\n];\r\n\r\n// For more info:\r\n// https://developers.google.com/web/updates/2016/04/intersectionobserver\r\n// https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\r\nfunction useIntersectionObserver(\r\n  args?: IntersectionObserverHookArgs,\r\n): IntersectionObserverHookResult {\r\n  const rootMargin = args?.rootMargin ?? DEFAULT_ROOT_MARGIN;\r\n  const threshold = args?.threshold ?? DEFAULT_THRESHOLD;\r\n\r\n  const nodeRef = useRef<IntersectionObserverHookRefCallbackNode>(null);\r\n  const rootRef = useRef<IntersectionObserverHookRootRefCallbackNode>(null);\r\n  const observerRef = useRef<IntersectionObserver | null>(null);\r\n\r\n  const [entry, setEntry] = useState<IntersectionObserverEntry>();\r\n\r\n  const unobserve = useCallback(() => {\r\n    // Disconnect the current observer (if there is one)\r\n    const currentObserver = observerRef.current;\r\n    currentObserver?.disconnect();\r\n    observerRef.current = null;\r\n  }, []);\r\n\r\n  const observe = useCallback(() => {\r\n    const node = nodeRef.current;\r\n    if (node) {\r\n      const root = rootRef.current;\r\n      const options = { root, rootMargin, threshold };\r\n      // Create a observer for current \"node\" with given options.\r\n      const observer = new IntersectionObserver(([newEntry]) => {\r\n        setEntry(newEntry);\r\n      }, options);\r\n      observer.observe(node);\r\n      observerRef.current = observer;\r\n    }\r\n  }, [rootMargin, threshold]);\r\n\r\n  const initializeObserver = useCallback(() => {\r\n    unobserve();\r\n    observe();\r\n  }, [observe, unobserve]);\r\n\r\n  const refCallback = useCallback<IntersectionObserverHookRefCallback>(\r\n    (node) => {\r\n      nodeRef.current = node;\r\n      initializeObserver();\r\n    },\r\n    [initializeObserver],\r\n  );\r\n\r\n  const rootRefCallback = useCallback<IntersectionObserverHookRootRefCallback>(\r\n    (rootNode) => {\r\n      rootRef.current = rootNode;\r\n      initializeObserver();\r\n    },\r\n    [initializeObserver],\r\n  );\r\n\r\n  useEffect(() => {\r\n    // After React 18, StrictMode unmounts and mounts components to be sure\r\n    // if they are resilient effects being mounted and destroyed multiple times.\r\n    // This a behavior to be sure nothing breaks when off-screen components\r\n    // can preserve their state with future React versions.\r\n    // So in StrictMode, React unmounts the component, clean-up of this useEffect gets triggered and\r\n    // we stop observing the node. But we need to start observing after component re-mounts with its preserved state.\r\n    // So to handle this case, we call initializeObserver here.\r\n    // https://reactjs.org/blog/2022/03/08/react-18-upgrade-guide.html#updates-to-strict-mode\r\n    initializeObserver();\r\n    return () => {\r\n      // We disconnect the observer on unmount to prevent memory leaks etc.\r\n      unobserve();\r\n    };\r\n  }, [initializeObserver, unobserve]);\r\n\r\n  return [refCallback, { entry, rootRef: rootRefCallback }];\r\n}\r\n\r\nexport default useIntersectionObserver;\r\n","import { useState } from 'react';\r\nimport useIntersectionObserver, {\r\n  IntersectionObserverHookArgs,\r\n  IntersectionObserverHookResult,\r\n} from './useIntersectionObserver';\r\n\r\nexport type TrackVisibilityHookArgs = IntersectionObserverHookArgs;\r\n\r\nexport type TrackVisibilityHookResult = [\r\n  IntersectionObserverHookResult[0],\r\n  IntersectionObserverHookResult[1] & {\r\n    isVisible: boolean;\r\n    wasEverVisible: boolean;\r\n  },\r\n];\r\n\r\nfunction useTrackVisibility(\r\n  args?: IntersectionObserverHookArgs,\r\n): TrackVisibilityHookResult {\r\n  const [ref, result] = useIntersectionObserver(args);\r\n  const isVisible = Boolean(result.entry?.isIntersecting);\r\n  const [wasEverVisible, setWasEverVisible] = useState(isVisible);\r\n\r\n  if (isVisible && !wasEverVisible) {\r\n    setWasEverVisible(true);\r\n  }\r\n\r\n  return [ref, { ...result, isVisible, wasEverVisible }];\r\n}\r\n\r\nexport default useTrackVisibility;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}